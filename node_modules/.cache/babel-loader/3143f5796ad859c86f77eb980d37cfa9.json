{"remainingRequest":"C:\\work\\treasure-bag\\treasure-bag\\node_modules\\thread-loader\\dist\\cjs.js!C:\\work\\treasure-bag\\treasure-bag\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\treasure-bag\\treasure-bag\\src\\store\\modules\\user.js","dependencies":[{"path":"C:\\work\\treasure-bag\\treasure-bag\\src\\store\\modules\\user.js","mtime":1580914032397},{"path":"C:\\work\\treasure-bag\\treasure-bag\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\treasure-bag\\treasure-bag\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\treasure-bag\\treasure-bag\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { login as _login, logout as _logout, getUserInfo as _getUserInfo } from '@/api/user';\nimport { getToken, setToken, removeToken } from '@/utils/auth';\nimport { resetRouter } from '@/router';\nvar state = {\n  token: getToken(),\n  name: '',\n  avatar: '',\n  coin: 0\n};\nvar mutations = {\n  SET_TOKEN: function SET_TOKEN(state, token) {\n    state.token = token;\n  },\n  SET_NAME: function SET_NAME(state, name) {\n    state.name = name;\n  },\n  SET_AVATAR: function SET_AVATAR(state, avatar) {\n    state.avatar = avatar;\n  },\n  SET_COIN: function SET_COIN(state, coin) {\n    state.coin = coin;\n  }\n};\nvar actions = {\n  // user login\n  login: function login(_ref, userInfo) {\n    var commit = _ref.commit;\n    var username = userInfo.username,\n        password = userInfo.password,\n        invite_code = userInfo.invite_code,\n        code = userInfo.code,\n        cg = userInfo.cg;\n    return new Promise(function (resolve, reject) {\n      _login({\n        username: username.trim(),\n        password: password,\n        inviteCode: invite_code,\n        type: 0,\n        code: code,\n        cg: cg\n      }).then(function (res) {\n        if (res.status === 0) {\n          commit('SET_TOKEN', '1');\n          setToken('1');\n        }\n\n        resolve(res);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // user logout\n  logout: function logout(_ref2) {\n    var commit = _ref2.commit,\n        state = _ref2.state;\n    return new Promise(function (resolve, reject) {\n      _logout().then(function () {\n        commit('SET_TOKEN', '');\n        removeToken();\n        resetRouter();\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // remove token\n  resetToken: function resetToken(_ref3) {\n    var commit = _ref3.commit;\n    return new Promise(function (resolve) {\n      commit('SET_TOKEN', '');\n      removeToken();\n      resolve();\n    });\n  },\n  getUserInfo: function getUserInfo(_ref4) {\n    var commit = _ref4.commit;\n    return new Promise(function (resolve, reject) {\n      _getUserInfo().then(function (res) {\n        if (res.status === 0) {\n          commit('SET_COIN', res.data.coin);\n          commit('SET_NAME', res.data.username);\n        }\n\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};",null]}