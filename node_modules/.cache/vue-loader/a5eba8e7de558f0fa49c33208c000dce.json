{"remainingRequest":"C:\\work\\treasure-bag\\treasure-bag\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\treasure-bag\\treasure-bag\\src\\views\\task\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\treasure-bag\\treasure-bag\\src\\views\\task\\index.vue","mtime":1580983008806},{"path":"C:\\work\\treasure-bag\\treasure-bag\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\treasure-bag\\treasure-bag\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\treasure-bag\\treasure-bag\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from 'vuex'\nimport { getBook, makeQuestion } from '@/api/uschool'\nexport default {\n  name: 'Task',\n  data() {\n    return {\n      data: [],\n      schedule: [],\n      visible1: true,\n      visible2: false,\n      activeNames: '',\n      user: {\n        user_invited_tick: 0,\n        coin: 0,\n        name: ''\n      },\n      keep_time: 0,\n      number: '',\n      unit: '',\n      book_name: ''\n\n    }\n  },\n  created() {\n    this.requestData()\n    getBook().then((res) => {\n      if (res.status === 0) {\n        const book = JSON.parse(res.data)\n        this.data = book\n      }\n    })\n  },\n  computed: {\n    ...mapGetters([\n      'coin',\n      'name'\n    ])\n  },\n\n  methods: {\n\n    handleWriting(number, unit, book_name) {\n      this.$confirm('确定开启第' + unit + '单元任务,将消耗15金币(请在开启任务前认真阅读下面公告)', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        center: true\n      }).then(() => {\n        makeQuestion({\n          bookName: book_name,\n          unit: unit,\n          bookNumber: number,\n          taskType: 0,\n          keepTime: 0\n        }).then(res => {\n          if (res.status === 0) {\n            this.$message({ message: '任务添加成功,请在任务记录查看进度', type: 'success' })\n            this.requestData()\n          } else if (res.status === 1) {\n            this.$message({ message: res.msg, type: 'warning' })\n          } else {\n            this.visible1 = false\n            this.$message.error('服务器异常，请稍后再试')\n          }\n        })\n      }).catch(() => {\n      })\n    },\n    handleSelect(number, unit, book_name) {\n      this.number = number\n      this.unit = unit\n      this.book_name = book_name\n      this.visible2 = true\n    },\n    requestData() {\n      this.$store.dispatch('user/getUserInfo')\n    },\n    handleBrushTime() {\n      makeQuestion({\n        bookName: this.book_name,\n        unit: this.unit,\n        bookNumber: this.number,\n        taskType: 1,\n        keepTime: this.keep_time\n      }).then(res => {\n        if (res.status === 0) {\n          this.$message({ message: '任务添加成功,请在任务记录查看进度', type: 'success' })\n          this.requestData()\n        }\n      })\n    },\n    getQueryVariable(url, variable) {\n      const query = url.split('?')[1]\n      const vars = query.split('&')\n      for (let i = 0; i < vars.length; i++) {\n        const pair = vars[i].split('=')\n        if (pair[0] === variable) {\n          return pair[1]\n        }\n      }\n      return ''\n    },\n    handleChange(index) {\n      console.log(index)\n      if (this.data[index]) {\n        if (this.schedule.some(item => item.index === index)) {\n          return\n        }\n      }\n    },\n    getPercentage(index, index2) {\n      let percentage = 0\n      this.schedule.map((item) => {\n        if (item.index === index) {\n          percentage = item.data[index2].unitProgress\n          return\n        }\n      })\n      return percentage\n    },\n    getScore(index, index2) {\n      let score = 0\n      this.schedule.map((item) => {\n        if (item.index === index) {\n          score = item.data[index2].unitScore\n          return\n        }\n      })\n      return score\n    }\n  }\n}\n",null]}